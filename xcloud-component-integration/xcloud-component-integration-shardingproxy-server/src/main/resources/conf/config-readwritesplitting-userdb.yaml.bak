#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##################### Configuration of 'userdb' by group sharding v5 #######################

schemaName: userdb

dataSource:
  #url:
  username: root
  password: root
  connectionTimeoutMilliseconds: 30000
  idleTimeoutMilliseconds: 60000
  maxLifetimeMilliseconds: 1800000
  maxPoolSize: 50
  minPoolSize: 1
  maintenanceIntervalMilliseconds: 30000
  #readOnly: 

dataSources:
  #userdb_g0db0_schema:
  #  url: jdbc:mysql://127.0.0.1:3306/information_schema?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  userdb_g0db0:
    url: jdbc:mysql://127.0.0.1:3306/userdb_g0db0?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  userdb_g0db1:
    url: jdbc:mysql://127.0.0.1:3306/userdb_g0db1?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  userdb_g0db2:
    url: jdbc:mysql://127.0.0.1:3306/userdb_g0db2?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  userdb_g1db0:
    url: jdbc:mysql://127.0.0.1:3306/userdb_g1db0?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  userdb_g1db1:
    url: jdbc:mysql://127.0.0.1:3306/userdb_g1db1?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  userdb_g1db2:
    url: jdbc:mysql://127.0.0.1:3306/userdb_g1db2?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8

rules:
 - !READWRITE_SPLITTING
  dataSources:
    userdb_g0db0:
      writeDataSourceName: userdb_g0db0
      readDataSourceNames:
        - userdb_g0db1
        - userdb_g0db2
      loadBalancerName: randomBalancer1
    userdb_g0db1:
      writeDataSourceName: userdb_g0db1
      readDataSourceNames:
        - userdb_g0db1
        - userdb_g0db2
      loadBalancerName: randomBalancer1
    userdb_g0db2:
      writeDataSourceName: userdb_g0db2
      readDataSourceNames:
        - userdb_g0db1
        - userdb_g0db2
      loadBalancerName: randomBalancer1
    userdb_g1db0:
      writeDataSourceName: userdb_g0db0
      readDataSourceNames:
        - userdb_g1db1
        - userdb_g1db2
      loadBalancerName: randomBalancer1
  loadBalancers:
    randomBalancer1:
      type: RANDOM

#################################### DB Group0 #########################################
 - !SHARDING
  tables: # Tables definitions.
    #SCHEMATA: # information_schema.SCHEMATA
    #  actualDataNodes: userdb_g0db0_schema.SCHEMATA
    #  tableStrategy:
    #    standard:
    #      shardingColumn: SCHEMA_NAME
    #      shardingAlgorithmName: schemeta_inline
    t_user:
      actualDataNodes: userdb_g0db${0..2}.t_user_${0..2}
      #actualDataNodes: 'userdb_g0db0.t_user_${0..3},userdb_g0db1.t_user_${0..2},userdb_g0db2.t_user_${0..2},userdb_g1db${0..2}.t_user_${0..2}'
      #databaseStrategy:
      tableStrategy:
        standard:
          shardingColumn: id
          shardingAlgorithmName: t_user_inline
      keyGenerateStrategy:
        column: id
        keyGeneratorName: snowflake
  bindingTables:
    - t_user
  defaultDatabaseStrategy:
    standard:
      shardingColumn: id
      #shardingAlgorithmName: database_inline
      #shardingAlgorithmName: database_volume_range
      shardingAlgorithmName: database_smart_mod
  defaultTableStrategy:
  shardingAlgorithms:
    database_smart_mod:
      type: SMART_MOD
      props:
        # Modular expression of all sharding (dbs/tables).
        sharding-mod-assign-expression: '_g0db0->0,1,2,3|_g0db1->4,5,6|_g0db2->7,8,9'
    #database_boundary_range: # see:org.apache.shardingsphere.sharding.algorithm.sharding.range.BoundaryBasedRangeShardingAlgorithm
    #  type: BOUNDARY_RANGE
    #  props:
    #    sharding-ranges:
    #database_volume_range: # see:org.apache.shardingsphere.sharding.algorithm.sharding.range.VolumeBasedRangeShardingAlgorithm
    #  type: VOLUME_RANGE
    #  props: # Must use quotation marks(string) or you cannot get them.
    #    range-lower: '0'
    #    range-upper: '20000000'
    #    sharding-volume: '10000000'
    #database_inline:
    #  type: INLINE
    #  props:
    #    algorithm-expression: userdb_g${(id / 40000000) as int}db0
    t_user_inline:
      type: INLINE
      props:
        algorithmExpression: t_user_${(id % 4) as int}
    #schemeta_inline:
    #  type: INLINE
    #  props:
    #    algorithmExpression: SCHAMETA
  keyGenerators:
    snowflake:
      type: SNOWFLAKE
      props:
        worker-id: '1001'

#################################### DB Group1 #########################################
 - !SHARDING
  tables: # Tables definitions.
    t_user:
      actualDataNodes: userdb_g1db${0..2}.t_user_${0..2}
      #databaseStrategy:
      tableStrategy:
        standard:
          shardingColumn: id
          shardingAlgorithmName: t_user_inline
      keyGenerateStrategy:
        column: id
        keyGeneratorName: snowflake
  bindingTables:
    - t_user
  defaultDatabaseStrategy:
    standard:
      shardingColumn: id
      #shardingAlgorithmName: database_volume_range
      shardingAlgorithmName: database_smart_mod
  defaultTableStrategy:
  shardingAlgorithms:
    database_smart_mod:
      type: SMART_MOD
      props:
        # Modular expression of all sharding (dbs/tables).
        sharding-mod-assign-expression: '_g1db0->0,1,2|_g1db1->3,4,5|_g1db2->6,7,8'
    #database_volume_range:
    #  type: VOLUME_RANGE
    #  props:
    #    range-lower: '20000000'
    #    range-upper: '50000000'
    #    sharding-volume: '10000000'
    t_user_inline:
      type: INLINE
      props:
        algorithmExpression: t_user_${(id % 6) as int}
  keyGenerators:
    snowflake:
      type: SNOWFLAKE
      props:
        worker-id: '1002'
